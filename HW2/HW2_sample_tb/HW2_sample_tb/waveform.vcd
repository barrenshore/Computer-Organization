$version Generated by VerilatedVcd $end
$date Sat Apr 27 18:04:59 2024 $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 ~ clk $end
  $var wire  1 "! finish $end
  $var wire  1 !! rst $end
  $scope module decode_tb $end
   $var wire 32 $! DWIDTH [31:0] $end
   $var wire  1 ~ clk $end
   $var wire  1 "! finish $end
   $var wire 32 Z golden_R[0] [31:0] $end
   $var wire 32 d golden_R[10] [31:0] $end
   $var wire 32 e golden_R[11] [31:0] $end
   $var wire 32 f golden_R[12] [31:0] $end
   $var wire 32 g golden_R[13] [31:0] $end
   $var wire 32 h golden_R[14] [31:0] $end
   $var wire 32 i golden_R[15] [31:0] $end
   $var wire 32 j golden_R[16] [31:0] $end
   $var wire 32 k golden_R[17] [31:0] $end
   $var wire 32 l golden_R[18] [31:0] $end
   $var wire 32 m golden_R[19] [31:0] $end
   $var wire 32 [ golden_R[1] [31:0] $end
   $var wire 32 n golden_R[20] [31:0] $end
   $var wire 32 o golden_R[21] [31:0] $end
   $var wire 32 p golden_R[22] [31:0] $end
   $var wire 32 q golden_R[23] [31:0] $end
   $var wire 32 r golden_R[24] [31:0] $end
   $var wire 32 s golden_R[25] [31:0] $end
   $var wire 32 t golden_R[26] [31:0] $end
   $var wire 32 u golden_R[27] [31:0] $end
   $var wire 32 v golden_R[28] [31:0] $end
   $var wire 32 w golden_R[29] [31:0] $end
   $var wire 32 \ golden_R[2] [31:0] $end
   $var wire 32 x golden_R[30] [31:0] $end
   $var wire 32 y golden_R[31] [31:0] $end
   $var wire 32 ] golden_R[3] [31:0] $end
   $var wire 32 ^ golden_R[4] [31:0] $end
   $var wire 32 _ golden_R[5] [31:0] $end
   $var wire 32 ` golden_R[6] [31:0] $end
   $var wire 32 a golden_R[7] [31:0] $end
   $var wire 32 b golden_R[8] [31:0] $end
   $var wire 32 c golden_R[9] [31:0] $end
   $var wire 32 3 golden_imm [31:0] $end
   $var wire  4 1 golden_op [3:0] $end
   $var wire  5 6 golden_rdst_id [4:0] $end
   $var wire 32 z golden_reg [31:0] $end
   $var wire  5 4 golden_rs1_id [4:0] $end
   $var wire  5 5 golden_rs2_id [4:0] $end
   $var wire  1 2 golden_ssel $end
   $var wire 32 { i [31:0] $end
   $var wire 32 ' imm [31:0] $end
   $var wire  1 2 imm_dont_care $end
   $var wire 32 $ instr [31:0] $end
   $var wire  4 % op [3:0] $end
   $var wire  1 0 overflow $end
   $var wire 32 | pat_num [31:0] $end
   $var wire 32 8 pattern [31:0] $end
   $var wire 32 , rd [31:0] $end
   $var wire  5 * rdst_id [4:0] $end
   $var wire 32 } reg_pattern [31:0] $end
   $var wire 32 - rs1 [31:0] $end
   $var wire  5 ( rs1_id [4:0] $end
   $var wire 32 . rs2 [31:0] $end
   $var wire  5 ) rs2_id [4:0] $end
   $var wire 32 + rs2_reg_file_out [31:0] $end
   $var wire  1 !! rst $end
   $var wire  1 7 rt_dont_care $end
   $var wire  1 & ssel $end
   $var wire 32 #! tmp [31:0] $end
   $var wire  1 %! we $end
   $var wire  1 / zero $end
   $scope module alu_inst $end
    $var wire 32 $! DWIDTH [31:0] $end
    $var wire  4 % op [3:0] $end
    $var wire  1 0 overflow $end
    $var wire 32 , rd [31:0] $end
    $var wire 32 - rs1 [31:0] $end
    $var wire 32 . rs2 [31:0] $end
    $var wire  1 / zero $end
   $upscope $end
   $scope module decode_inst $end
    $var wire 32 $! DWIDTH [31:0] $end
    $var wire  4 (! OP_ADD [3:0] $end
    $var wire  4 &! OP_AND [3:0] $end
    $var wire  4 *! OP_NOR [3:0] $end
    $var wire  4 ,! OP_NOT_DEFINED [3:0] $end
    $var wire  4 '! OP_OR [3:0] $end
    $var wire  4 +! OP_SLT [3:0] $end
    $var wire  4 )! OP_SUB [3:0] $end
    $var wire 32 ' imm [31:0] $end
    $var wire 32 $ instr [31:0] $end
    $var wire  4 % op [3:0] $end
    $var wire  5 * rdst_id [4:0] $end
    $var wire  5 ( rs1_id [4:0] $end
    $var wire  5 ) rs2_id [4:0] $end
    $var wire  1 & ssel $end
   $upscope $end
   $scope module reg_file_inst $end
    $var wire 32 $! DWIDTH [31:0] $end
    $var wire 32 9 R[0] [31:0] $end
    $var wire 32 C R[10] [31:0] $end
    $var wire 32 D R[11] [31:0] $end
    $var wire 32 E R[12] [31:0] $end
    $var wire 32 F R[13] [31:0] $end
    $var wire 32 G R[14] [31:0] $end
    $var wire 32 H R[15] [31:0] $end
    $var wire 32 I R[16] [31:0] $end
    $var wire 32 J R[17] [31:0] $end
    $var wire 32 K R[18] [31:0] $end
    $var wire 32 L R[19] [31:0] $end
    $var wire 32 : R[1] [31:0] $end
    $var wire 32 M R[20] [31:0] $end
    $var wire 32 N R[21] [31:0] $end
    $var wire 32 O R[22] [31:0] $end
    $var wire 32 P R[23] [31:0] $end
    $var wire 32 Q R[24] [31:0] $end
    $var wire 32 R R[25] [31:0] $end
    $var wire 32 S R[26] [31:0] $end
    $var wire 32 T R[27] [31:0] $end
    $var wire 32 U R[28] [31:0] $end
    $var wire 32 V R[29] [31:0] $end
    $var wire 32 ; R[2] [31:0] $end
    $var wire 32 W R[30] [31:0] $end
    $var wire 32 X R[31] [31:0] $end
    $var wire 32 < R[3] [31:0] $end
    $var wire 32 = R[4] [31:0] $end
    $var wire 32 > R[5] [31:0] $end
    $var wire 32 ? R[6] [31:0] $end
    $var wire 32 @ R[7] [31:0] $end
    $var wire 32 A R[8] [31:0] $end
    $var wire 32 B R[9] [31:0] $end
    $var wire  1 ~ clk $end
    $var wire 32 , rdst [31:0] $end
    $var wire  5 * rdst_id [4:0] $end
    $var wire 32 - rs1 [31:0] $end
    $var wire  5 ( rs1_id [4:0] $end
    $var wire 32 + rs2 [31:0] $end
    $var wire  5 ) rs2_id [4:0] $end
    $var wire  1 !! rst $end
    $var wire  1 %! we $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 Y i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000100000 #
b00000000000000000000000000000000 $
b1111 %
1&
b00000000000000000000000000000000 '
b00000 (
b00000 )
b00000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
0/
00
b0000 1
02
b00000000000000000000000000000000 3
b00000 4
b00000 5
b00000 6
17
b10000000000000000000000000101100 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b10000000000000000000000000101011 }
0~
1!!
0"!
b00000000000000000000000000000000 #!
b00000000000000000000000000100000 $!
1%!
b0000 &!
b0001 '!
b0010 (!
b0110 )!
b1100 *!
b0111 +!
b1111 ,!
#1
b00000000000000000000000000100000 Y
1~
#2
0~
#3
1~
#4
0~
#5
b00000000110101110010100000101010 $
b0111 %
b00110 (
b10111 )
b00101 *
1/
b0111 1
12
b00000000000000000010100000101010 3
b00110 4
b10111 5
b00101 6
07
1~
0!!
b00000000000000000000000000000111 #!
#6
b00000000000000000000000000000001 |
0~
#7
b00101000001010001110010100110111 $
0&
b11111111111111111110010100110111 '
b00001 (
b01000 )
b01000 *
b11111111111111111110010100110111 .
02
b11111111111111111110010100110111 3
b00001 4
b01000 5
b01000 6
17
1~
#8
b00000000000000000000000000000010 |
0~
#9
b00101011001110011000011101010111 $
b11111111111111111000011101010111 '
b11001 (
b11001 )
b11001 *
b11111111111111111000011101010111 .
b11111111111111111000011101010111 3
b11001 4
b11001 5
b11001 6
1~
#10
b00000000000000000000000000000011 |
0~
#11
b00000011100110011110000000100010 $
b0110 %
1&
b11100 (
b11100 *
b00000000000000000000000000000000 .
b0110 1
12
b11111111111111111110000000100010 3
b11100 4
b11100 6
07
1~
#12
b00000000000000000000000000000100 |
0~
#13
b00000010101100011100100000101010 $
b0111 %
b10101 (
b10001 )
b11001 *
b0111 1
b11111111111111111100100000101010 3
b10101 4
b10001 5
b11001 6
1~
#14
b00000000000000000000000000000101 |
0~
#15
b00000011010011111000000000100100 $
b0000 %
b11010 (
b01111 )
b10000 *
b0000 1
b11111111111111111000000000100100 3
b11010 4
b01111 5
b10000 6
1~
#16
b00000000000000000000000000000110 |
0~
#17
b00100000001011010110000001001000 $
b0010 %
0&
b00000000000000000110000001001000 '
b00001 (
b01101 )
b01101 *
b00000000000000000110000001001000 ,
b00000000000000000110000001001000 .
0/
b0010 1
02
b00000000000000000110000001001000 3
b00001 4
b01101 5
b01101 6
17
1~
#18
b00000000000000000000000000000111 |
0~
#19
b00000001110000101011100000100101 $
b0001 %
1&
b01110 (
b00010 )
b10111 *
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 .
1/
b0001 1
12
b11111111111111111011100000100101 3
b01110 4
b00010 5
b10111 6
07
b00000000000000000110000001001000 F
1~
#20
b00000000000000000000000000001000 |
0~
#21
b00100001000111110011101011111111 $
b0010 %
0&
b00000000000000000011101011111111 '
b01000 (
b11111 )
b11111 *
b00000000000000000011101011111111 ,
b00000000000000000011101011111111 .
0/
b0010 1
02
b00000000000000000011101011111111 3
b01000 4
b11111 5
b11111 6
17
1~
#22
b00000000000000000000000000001001 |
0~
#23
b00101011100000011010100110011100 $
b0111 %
b11111111111111111010100110011100 '
b11100 (
b00001 )
b00001 *
b00000000000000000000000000000000 ,
b11111111111111111010100110011100 .
1/
b0111 1
b11111111111111111010100110011100 3
b11100 4
b00001 5
b00001 6
b00000000000000000011101011111111 X
1~
#24
b00000000000000000000000000001010 |
0~
#25
b00100000010001000101001110111101 $
b0010 %
b00000000000000000101001110111101 '
b00010 (
b00100 )
b00100 *
b00000000000000000101001110111101 ,
b00000000000000000101001110111101 .
0/
b0010 1
b00000000000000000101001110111101 3
b00010 4
b00100 5
b00100 6
1~
#26
b00000000000000000000000000001011 |
0~
#27
b00000000000000000101001110111101 +
b00000000000000000101001110111101 =
1~
1"!
#28
b00000000000000000110000001001000 g
b00000000000000000011101011111111 y
b00000000000000000011101011111111 z
b00000000000000000000000000100000 {
b00000000000000000000000000001100 |
0~
b00000000000000000000000000000001 #!
